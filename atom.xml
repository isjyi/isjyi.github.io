<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://isjyi.github.io</id>
    <title>Toradora</title>
    <updated>2020-05-10T07:54:04.186Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://isjyi.github.io"/>
    <link rel="self" href="https://isjyi.github.io/atom.xml"/>
    <subtitle>不会飞的猪，只不过是一块猪肉而已。</subtitle>
    <logo>https://isjyi.github.io/images/avatar.png</logo>
    <icon>https://isjyi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Toradora</rights>
    <entry>
        <title type="html"><![CDATA[HTTP]]></title>
        <id>https://isjyi.github.io/post/http/</id>
        <link href="https://isjyi.github.io/post/http/">
        </link>
        <updated>2019-01-24T07:10:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="http-协议">HTTP 协议</h2>
<ul>
<li>HTTP 协议构建于 TCP/IP 协议之上，是一个应用层协议，默认端口号是 80</li>
<li>HTTP 是无连接无状态的</li>
</ul>
<h2 id="http-报文">HTTP 报文</h2>
<h3 id="请求报文">请求报文</h3>
<p>HTTP 协议是以 ASCII 码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>
<pre><code>&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;
&lt;headers&gt;

&lt;entity-body&gt;
</code></pre>
<p>HTTP 定义了与服务器交互的不同方法，最基本的方法有4种，分别是<code>GET</code>，<code>POST</code>，<code>PUT</code>，<code>DELETE</code>。URL全称是资源描述符，我们可以这样认为：一个<code>URL</code>地址，它用于描述一个网络上的资源，而 HTTP 中的<code>GET</code>，<code>POST</code>，<code>PUT</code>，<code>DELETE</code>就对应着对这个资源的查，增，改，删4个操作。</p>
<ol>
<li>
<p>GET 用于信息获取，而且应该是安全的 和 幂等的。</p>
<p>所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p>
<p>幂等的意味着对同一 URL 的多个请求应该返回同样的结果。</p>
<p>GET 请求报文示例：</p>
<pre><code>GET /books/?sex=man&amp;name=Professional HTTP/1.1
Host: www.example.com
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)
Gecko/20050225 Firefox/1.0.1
Connection: Keep-Alive
</code></pre>
</li>
<li>
<p>POST 表示可能修改变服务器上的资源的请求。</p>
<pre><code> POST / HTTP/1.1
 Host: www.example.com
 User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)
 Gecko/20050225 Firefox/1.0.1
 Content-Type: application/x-www-form-urlencoded
 Content-Length: 40
 Connection: Keep-Alive

 sex=man&amp;name=Professional  
</code></pre>
</li>
<li>
<p>注意:</p>
</li>
</ol>
<ul>
<li>GET 可提交的数据量受到URL长度的限制，HTTP 协议规范没有对 URL 长度进行限制。这个限制是特定的浏览器及服务器对它的限制</li>
<li>理论上讲，POST 是没有大小限制的，HTTP 协议规范也没有进行大小限制，出于安全考虑，服务器软件在实现时会做一定限制</li>
<li>参考上面的报文示例，可以发现 GET 和 POST 数据内容是一模一样的，只是位置不同，一个在 URL 里，一个在 HTTP 包的包体里</li>
</ul>
<h3 id="post-提交数据的方式">POST 提交数据的方式</h3>
<p>HTTP 协议中规定 POST 提交的数据必须在 body 部分中，但是协议中没有规定数据使用哪种编码方式或者数据格式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p>
<p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 PHP、Python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们：</p>
<ul>
<li><code>application/x-www-form-urlencoded</code></li>
</ul>
<p>这是最常见的 POST 数据提交方式。浏览器的原生 <code>&lt;form&gt;</code> 表单，如果不设置 enctype 属性，那么最终就会以 <code>application/x-www-form-urlencoded</code> 方式提交数据。上个小节当中的例子便是使用了这种提交方式。可以看到 body 当中的内容和 GET 请求是完全相同的。</p>
<ul>
<li><code>multipart/form-data</code></li>
</ul>
<p>这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 <code>&lt;form&gt;</code> 表单的 enctype 等于 <code>multipart/form-data</code>。直接来看一个请求示例：</p>
<pre><code>POST http://www.example.com HTTP/1.1
Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA

------WebKitFormBoundaryrGKCBY7qhFd3TrwA
Content-Disposition: form-data; name=&quot;text&quot;

title
------WebKitFormBoundaryrGKCBY7qhFd3TrwA
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;
Content-Type: image/png

PNG ... content of chrome.png ...
------WebKitFormBoundaryrGKCBY7qhFd3TrwA--
</code></pre>
<p>这个例子稍微复杂点。首先生成了一个 boundary 用于分割不同的字段，为了避免与正文内容重复，boundary 很长很复杂。然后 <code>Content-Type</code> 里指明了数据是以 <code>multipart/form-data</code> 来编码，本次请求的 boundary 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 --boundary 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 --boundary-- 标示结束。关于 multipart/form-data 的详细定义，请前往 <a href="https://www.ietf.org/rfc/rfc1867.txt">RFC1867</a> 查看（或者相对友好一点的 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition">MDN 文档</a>）。<br>
这种方式一般用来上传文件，各大服务端语言对它也有着良好的支持。</p>
<p>上面提到的这两种 POST 数据的方式，都是浏览器原生支持的，而且现阶段标准中原生 <code>&lt;form&gt;</code> 表单也只支持这两种方式（通过 <code>&lt;form&gt;</code> 元素的 enctype 属性指定，默认为 <code>application/x-www-form-urlencoded</code>。其实 enctype 还支持 text/plain，不过用得非常少）。</p>
<p>随着越来越多的 Web 站点，尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，例如 <code>application/json</code>，<code>text/xml</code>，乃至 <code>application/x-protobuf</code> 这种二进制格式，只要服务器可以根据 <code>Content-Type</code> 和 <code>Content-Encoding</code> 正确地解析出请求，都是没有问题的。</p>
<h3 id="响应报文">响应报文</h3>
<p>HTTP 响应与 HTTP 请求相似，HTTP响应也由3个部分构成，分别是：</p>
<ul>
<li>状态行</li>
<li>响应头(Response Header)</li>
<li>响应正文</li>
</ul>
<p>状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。</p>
<p>常见的状态码有如下几种：</p>
<ul>
<li><code>200 OK</code> 客户端请求成功</li>
<li><code>301 Moved Permanently</code> 请求永久重定向</li>
<li><code>302 Moved Temporarily</code> 请求临时重定向</li>
<li><code>304 Not Modified</code> 文件未修改，可以直接使用缓存的文件。</li>
<li><code>400 Bad Request</code> 由于客户端请求有语法错误，不能被服务器所理解。</li>
<li><code>401 Unauthorized</code> 请求未经授权。这个状态代码必须和WWW-Authenticate报头域一起使用</li>
<li><code>403 Forbidden</code> 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因</li>
<li><code>404 Not Found</code> 请求的资源不存在，例如，输入了错误的URL</li>
<li><code>500 Internal Server Error</code> 服务器发生不可预期的错误，导致无法完成客户端的请求。</li>
<li><code>503 Service Unavailable</code> 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。</li>
</ul>
<p>下面是一个HTTP响应的例子：</p>
<pre><code>HTTP/1.1 200 OK

Server:Apache Tomcat/5.0.12
Date:Mon,6Oct2003 13:23:42 GMT
Content-Length:112

&lt;html&gt;...
</code></pre>
<h3 id="条件-get">条件 GET</h3>
<p>HTTP 条件 GET 是 HTTP 协议为了减少不必要的带宽浪费，提出的一种方案。详见 RFC2616 。</p>
<ol>
<li>HTTP 条件 GET 使用的时机？<br>
<br/> 客户端之前已经访问过某网站，并打算再次访问该网站。</li>
<li>HTTP 条件 GET 使用的方法？</li>
</ol>
<p>客户端向服务器发送一个包询问是否在上一次访问网站的时间后是否更改了页面，如果服务器没有更新，显然不需要把整个网页传给客户端，客户端只要使用本地缓存即可，如果服务器对照客户端给出的时间已经更新了客户端请求的网页，则发送这个更新了的网页给用户。</p>
<p>下面是一个具体的发送接受报文示例：</p>
<p>客户端发送请求：</p>
<pre><code> GET / HTTP/1.1  
 Host: www.sina.com.cn:80  
 If-Modified-Since:Thu, 4 Feb 2010 20:39:13 GMT  
 Connection: Close  
</code></pre>
<p>第一次请求时，服务器端返回请求数据，之后的请求，服务器根据请求中的 <code>If-Modified-Since</code> 字段判断响应文件没有更新，如果没有更新，服务器返回一个 <code>304 Not Modified</code>响应，告诉浏览器请求的资源在浏览器上没有更新，可以使用已缓存的上次获取的文件。</p>
<pre><code> HTTP/1.0 304 Not Modified  
 Date: Thu, 04 Feb 2010 12:38:41 GMT  
 Content-Type: text/html  
 Expires: Thu, 04 Feb 2010 12:39:41 GMT  
 Last-Modified: Thu, 04 Feb 2010 12:29:04 GMT  
 Age: 28  
 X-Cache: HIT from sy32-21.sina.com.cn  
 Connection: close 
</code></pre>
<p>如果服务器端资源已经更新的话，就返回正常的响应。</p>
<h3 id="持久连接">持久连接</h3>
<p>我们知道 HTTP 协议采用“请求-应答”模式，当使用普通模式，即非 Keep-Alive 模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接（HTTP 协议为无连接的协议）；当使用 Keep-Alive 模式（又称持久连接、连接重用）时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接。</p>
<p>在 HTTP 1.0 版本中，并没有官方的标准来规定 Keep-Alive 如何工作，因此实际上它是被附加到 HTTP 1.0协议上，如果客户端浏览器支持 Keep-Alive ，那么就在HTTP请求头中添加一个字段 Connection: Keep-Alive，当服务器收到附带有 Connection: Keep-Alive 的请求时，它也会在响应头中添加一个同样的字段来使用 Keep-Alive 。这样一来，客户端和服务器之间的HTTP连接就会被保持，不会断开（超过 Keep-Alive 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。</p>
<p>在 HTTP 1.1 版本中，默认情况下所有连接都被保持，如果加入 &quot;Connection: close&quot; 才关闭。目前大部分浏览器都使用 HTTP 1.1 协议，也就是说默认都会发起 Keep-Alive 的连接请求了，所以是否能完成一个完整的 Keep-Alive 连接就看服务器设置情况。</p>
<p>由于 HTTP 1.0 没有官方的 Keep-Alive 规范，并且也已经基本被淘汰，以下讨论均是针对 HTTP 1.1 标准中的 Keep-Alive 展开的。</p>
<p>注意：</p>
<ul>
<li>
<p>HTTP Keep-Alive 简单说就是保持当前的TCP连接，避免了重新建立连接。</p>
</li>
<li>
<p>HTTP 长连接不可能一直保持，例如 Keep-Alive: timeout=5, max=100，表示这个TCP通道可以保持5秒，max=100，表示这个长连接最多接收100次请求就断开。</p>
</li>
<li>
<p>HTTP 是一个无状态协议，这意味着每个请求都是独立的，Keep-Alive 没能改变这个结果。另外，Keep-Alive也不能保证客户端和服务器之间的连接一定是活跃的，在 HTTP1.1 版本中也如此。唯一能保证的就是当连接被关闭时你能得到一个通知，所以不应该让程序依赖于 Keep-Alive 的保持连接特性，否则会有意想不到的后果。</p>
</li>
<li>
<p>使用长连接之后，客户端、服务端怎么知道本次传输结束呢？两部分：</p>
<ol>
<li>判断传输数据是否达到了Content-Length 指示的大小；</li>
<li>动态生成的文件没有 Content-Length ，它是分块传输（chunked），这时候就要根据 chunked 编码来判断，chunked 编码的数据在最后有一个空 chunked 块，表明本次传输数据结束，详见<a href="https://www.cnblogs.com/skynet/archive/2010/12/11/1903347.html">这里</a>。什么是 chunked 分块传输呢？下面我们就来介绍一下。</li>
</ol>
</li>
</ul>
<h3 id="transfer-encoding">Transfer-Encoding</h3>
<p>Transfer-Encoding 是一个用来标示 HTTP 报文传输格式的头部值。尽管这个取值理论上可以有很多，但是当前的 HTTP 规范里实际上只定义了一种传输取值——chunked。</p>
<p>如果一个HTTP消息（请求消息或应答消息）的Transfer-Encoding消息头的值为chunked，那么，消息体由数量未定的块组成，并以最后一个大小为0的块为结束。</p>
<p>每一个非空的块都以该块包含数据的字节数（字节数以十六进制表示）开始，跟随一个CRLF （回车及换行），然后是数据本身，最后块CRLF结束。在一些实现中，块大小和CRLF之间填充有白空格（0x20）。</p>
<p>最后一块是单行，由块大小（0），一些可选的填充白空格，以及CRLF。最后一块不再包含任何数据，但是可以发送可选的尾部，包括消息头字段。消息最后以CRLF结尾。</p>
<p>一个示例响应如下：</p>
<pre><code>HTTP/1.1 200 OK
Content-Type: text/plain
Transfer-Encoding: chunked

25
This is the data in the first chunk

1A
and this is the second one
0
</code></pre>
<p><strong>注意：</strong></p>
<ul>
<li>chunked 和 multipart 两个名词在意义上有类似的地方，不过在 HTTP 协议当中这两个概念则不是一个类别的。multipart 是一种 Content-Type，标示 HTTP 报文内容的类型，而 chunked 是一种传输格式，标示报头将以何种方式进行传输。</li>
<li>chunked 传输不能事先知道内容的长度，只能靠最后的空 chunk 块来判断，因此对于下载请求来说，是没有办法实现进度的。在浏览器和下载工具中，偶尔我们也会看到有些文件是看不到下载进度的，即采用 chunked 方式进行下载。</li>
<li>chunked 的优势在于，服务器端可以边生成内容边发送，无需事先生成全部的内容。HTTP/2 不支持 Transfer-Encoding: chunked，因为 HTTP/2 有自己的 streaming 传输方式（Source：<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding">MDN - Transfer-Encoding</a>）。</li>
</ul>
<h3 id="http-pipelininghttp-管线化">HTTP Pipelining（HTTP 管线化）</h3>
<p>默认情况下 HTTP 协议中每个传输层连接只能承载一个 HTTP 请求和响应，浏览器会在收到上一个请求的响应之后，再发送下一个请求。在使用持久连接的情况下，某个连接上消息的传递类似于<code>请求1 -&gt; 响应1 -&gt; 请求2 -&gt; 响应2 -&gt; 请求3 -&gt; 响应3</code>。+</p>
<p>HTTP Pipelining（管线化）是将多个 HTTP 请求整批提交的技术，在传送过程中不需等待服务端的回应。使用 HTTP Pipelining 技术之后，某个连接上的消息变成了类似这样<code>请求1 -&gt; 请求2 -&gt; 请求3 -&gt; 响应1 -&gt; 响应2 -&gt; 响应3</code>。</p>
<p>注意下面几点：</p>
<ul>
<li>管线化机制通过持久连接（persistent connection）完成，仅 HTTP/1.1 支持此技术（HTTP/1.0不支持）</li>
<li>只有 GET 和 HEAD 请求可以进行管线化，而 POST 则有所限制</li>
<li>初次创建连接时不应启动管线机制，因为对方（服务器）不一定支持 HTTP/1.1 版本的协议</li>
<li>管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变</li>
<li>HTTP /1.1 要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可</li>
<li>由于上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如 Chrome 和 Firefox 默认并未开启管线化支持</li>
</ul>
<p>更多关于 HTTP Pipelining 的知识可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Connection_management_in_HTTP_1.x">这里</a>。</p>
<h3 id="会话跟踪">会话跟踪</h3>
<ol>
<li>
<p>什么是会话？<br>
<br/>客户端打开与服务器的连接发出请求到服务器响应客户端请求的全过程称之为会话。</p>
</li>
<li>
<p>什么是会话跟踪？<br>
<br/>会话跟踪指的是对同一个用户对服务器的连续的请求和接受响应的监视。</p>
</li>
<li>
<p>为什么需要会话跟踪？<br>
<br/>浏览器与服务器之间的通信是通过HTTP协议进行通信的，而HTTP协议是”无状态”的协议，它不能保存客户的信息，即一次响应完成之后连接就断开了，下一次的请求需要重新连接，这样就需要判断是否是同一个用户，所以才有会话跟踪技术来实现这种要求。</p>
</li>
<li>
<p>会话跟踪常用的方法:</p>
<ol>
<li>URL 重写<br>
<br/>URL(统一资源定位符)是Web上特定页面的地址，URL重写的技术就是在URL结尾添加一个附加数据以标识该会话,把会话ID通过URL的信息传递过去，以便在服务器端进行识别不同的用户。</li>
<li>隐藏表单域<br>
<br/>将会话ID添加到HTML表单元素中提交到服务器，此表单元素并不在客户端显示</li>
<li>Cookie<br>
<br/>Cookie 是Web 服务器发送给客户端的一小段信息，客户端请求时可以读取该信息发送到服务器端，进而进行用户的识别。对于客户端的每次请求，服务器都会将 Cookie 发送到客户端,在客户端可以进行保存,以便下次使用。<br>
<br/><br/>客户端可以采用两种方式来保存这个 Cookie 对象，一种方式是保存在客户端内存中，称为临时 Cookie，浏览器关闭后这个 Cookie 对象将消失。另外一种方式是保存在客户机的磁盘上，称为永久 Cookie。以后客户端只要访问该网站，就会将这个 Cookie 再次发送到服务器上，前提是这个 Cookie 在有效期内，这样就实现了对客户的跟踪。<br>
<br/><br/>Cookie 是可以被客户端禁用的。</li>
<li>Session:<br>
<br/>每一个用户都有一个不同的 session，各个用户之间是不能共享的，是每个用户所独享的，在 session 中可以存放信息。<br>
<br/><br/>在服务器端会创建一个 session 对象，产生一个 sessionID 来标识这个 session 对象，然后将这个 sessionID 放入到 Cookie 中发送到客户端，下一次访问时，sessionID 会发送到服务器，在服务器端进行识别不同的用户。<br>
<br/><br/>Session 的实现依赖于 Cookie，如果 Cookie 被禁用，那么 session 也将失效。</li>
</ol>
</li>
</ol>
<h3 id="跨站攻击">跨站攻击</h3>
<ul>
<li>
<p>CSRF（Cross-site request forgery，跨站请求伪造）</p>
<p>CSRF(XSRF) 顾名思义，是伪造请求，冒充用户在站内的正常操作。</p>
<p>例如，一论坛网站的发贴是通过 GET 请求访问，点击发贴之后 JS 把发贴内容拼接成目标 URL 并访问：</p>
<p><code>http://example.com/bbs/create_post.php?title=标题&amp;content=内容</code></p>
<p>那么，我们只需要在论坛中发一帖，包含一链接：<br/></p>
<p><code>http://example.com/bbs/create_post.php?title=我是脑残&amp;content=哈哈</code></p>
<p>只要有用户点击了这个链接，那么他们的帐户就会在不知情的情况下发布了这一帖子。可能这只是个恶作剧，但是既然发贴的请求可以伪造，那么删帖、转帐、改密码、发邮件全都可以伪造。</p>
<p><strong>如何防范 CSRF 攻击？</strong> 可以注意以下几点：</p>
<ul>
<li>
<p>关键操作只接受 POST 请求</p>
</li>
<li>
<p>验证码</p>
<p>CSRF 攻击的过程，往往是在用户不知情的情况下构造网络请求。所以如果使用验证码，那么每次操作都需要用户进行互动，从而简单有效的防御了CSRF攻击。</p>
<p>但是如果你在一个网站作出任何举动都要输入验证码会严重影响用户体验，所以验证码一般只出现在特殊操作里面，或者在注册时候使用。</p>
</li>
<li>
<p>检测 Referer</p>
<p>常见的互联网页面与页面之间是存在联系的，比如你在 <code>www.baidu.com</code> 应该是找不到通往<code>www.google.com</code> 的链接的，再比如你在论坛留言，那么不管你留言后重定向到哪里去了，之前的那个网址一定会包含留言的输入框，这个之前的网址就会保留在新页面头文件的 <code>Referer</code> 中</p>
<p>通过检查 <code>Referer</code> 的值，我们就可以判断这个请求是合法的还是非法的，但是问题出在服务器不是任何时候都能接受到 <code>Referer</code> 的值，所以 Referer Check 一般用于监控 CSRF 攻击的发生，而不用来抵御攻击。</p>
<p>Token 使用原则</p>
<ul>
<li>Token 要足够随机————只有这样才算不可预测</li>
<li>Token 是一次性的，即每次请求成功后要更新Token————这样可以增加攻击难度，增加预测难度</li>
<li>Token 要注意保密性————敏感操作使用 post，防止 Token 出现在 URL 中</li>
</ul>
<p><strong>注意</strong>：过滤用户输入的内容<strong>不能</strong>阻挡 csrf，我们需要做的是过滤请求的<strong>来源</strong>。</p>
</li>
</ul>
</li>
<li>
<p>XSS（Cross Site Scripting，跨站脚本攻击）</p>
<p>XSS 全称“跨站脚本”，是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。</p>
<p>运行预期之外的脚本带来的后果有很多中，可能只是简单的恶作剧——一个关不掉的窗口：</p>
<pre><code>  while (true) {
      alert(&quot;你关不掉我~&quot;);
  }
</code></pre>
<p>也可以是盗号或者其他未授权的操作。</p>
<p>XSS 是实现 CSRF 的诸多途径中的一条，但绝对不是唯一的一条。一般习惯上把通过 XSS 来实现的 CSRF 称为 XSRF。</p>
<p><strong>如何防御 XSS 攻击？</strong></p>
<p>理论上，所有可输入的地方没有对输入数据进行处理的话，都会存在 XSS 漏洞，漏洞的危害取决于攻击代码的威力，攻击代码也不局限于 script。防御 XSS 攻击最简单直接的方法，就是过滤用户的输入。</p>
<p>如果不需要用户输入 HTML，可以直接对用户的输入进行 HTML escape 。下面一小段脚本：</p>
<p><code>&lt;script&gt;window.location.href=”http://www.baidu.com”;&lt;/script&gt;</code></p>
<p>经过 escape 之后就成了：</p>
<p><code>&amp;lt;script&amp;gt;window.location.href=&amp;quot;http://www.baidu.com&amp;quot;&amp;lt;/script&amp;gt;</code></p>
<p>它现在会像普通文本一样显示出来，变得无毒无害，不能执行了。</p>
<p>当我们需要用户输入 HTML 的时候，需要对用户输入的内容做更加小心细致的处理。仅仅粗暴地去掉 script 标签是没有用的，任何一个合法 HTML 标签都可以添加 onclick 一类的事件属性来执行 JavaScript。更好的方法可能是，将用户的输入使用 HTML 解析库进行解析，获取其中的数据。然后根据用户原有的标签属性，重新构建 HTML 元素树。构建的过程中，所有的标签、属性都只从白名单中拿取。</p>
</li>
</ul>
<h3 id="参考资料">参考资料</h3>
<ul>
<li><a href="https://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html">浅谈HTTP中Get与Post的区别</a></li>
<li><a href="https://www.cnblogs.com/loveyakamoz/archive/2011/07/22/2113614.html">http请求与http响应详细解析</a></li>
<li><a href="https://blog.csdn.net/luoleicn/article/details/5289496">HTTP 条件 Get (Conditional Get)</a></li>
<li><a href="https://www.cnblogs.com/cswuyg/p/3653263.html">HTTP中的长连接与短连接</a></li>
<li><a href="https://www.cnblogs.com/skynet/archive/2010/12/11/1903347.html">HTTP Keep-Alive模式</a></li>
<li><a href="https://zh.wikipedia.org/zh-cn/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81">分块传输编码</a></li>
<li><a href="https://blog.csdn.net/dongzhiquan/article/details/6114040">HTTP 管线化(HTTP pipelining)</a></li>
<li><a href="https://www.cnblogs.com/skynet/archive/2010/05/18/1738301.html">HTTP协议及其POST与GET操作差异 &amp; C#中如何使用POST、GET等</a></li>
<li><a href="https://www.cnblogs.com/softidea/p/5745369.html">四种常见的 POST 提交数据方式</a></li>
<li><a href="https://blog.csdn.net/qq_33098039/article/details/78184535">会话跟踪</a></li>
<li><a href="https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/">总结 XSS 与 CSRF 两种跨站攻击</a></li>
<li><a href="https://wooyun.js.org/drops/CSRF%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95.html">CSRF简单介绍与利用方法</a></li>
<li><a href="https://blog.csdn.net/ghsau/article/details/17027893">XSS攻击及防御</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">维基百科：HTTP</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TCP 的特性]]></title>
        <id>https://isjyi.github.io/post/tcp-de-te-xing/</id>
        <link href="https://isjyi.github.io/post/tcp-de-te-xing/">
        </link>
        <updated>2019-01-23T07:03:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="tcp-的特性">TCP 的特性</h2>
<ul>
<li>TCP 提供一种面向连接的、可靠的字节流服务</li>
<li>在一个 TCP 连接中，仅有两方进行彼此通信。广播和多播不能用于 TCP</li>
<li>TCP 使用校验和，确认和重传机制来保证可靠传输</li>
<li>TCP 给数据分节进行排序，并使用累积确认保证数据的顺序不变和非重复</li>
<li>TCP 使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制</li>
</ul>
<p><strong>注意：</strong> TCP 并不能保证数据一定会被对方接收到，因为这是不可能的。TCP 能够做到的是，如果有可能，就把数据递送到接收方，否则就（通过放弃重传并且中断连接这一手段）通知用户。因此准确说 TCP 也不是 100% 可靠的协议，它所能提供的是数据的可靠递送或故障的可靠通知。</p>
<h2 id="三次握手与四次挥手">三次握手与四次挥手</h2>
<p>所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包。</p>
<p>三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。在 socket 编程中，客户端执行 <code>connect()</code> 时。将触发三次握手。</p>
<ul>
<li>
<p>第一次握手(SYN=1, seq=x):</p>
<p>客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。</p>
<p>发送完毕后，客户端进入 <code>SYN_SEND</code> 状态。</p>
</li>
<li>
<p>第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):</p>
<p>服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加1，即X+1。 发送完毕后，服务器端进入 <code>SYN_RCVD</code> 状态。</p>
</li>
<li>
<p>第三次握手(ACK=1，ACKnum=y+1)</p>
<p>客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1</p>
<p>发送完毕后，客户端进入 <code>ESTABLISHED</code> 状态，当服务器端接收到这个包时，也进入 <code>ESTABLISHED</code> 状态，TCP 握手结束。</p>
</li>
</ul>
<p>三次握手的过程的示意图如下：<br>
<img src="https://isjyi.github.io/post-images/1589094373424.png" alt="三次握手的过程" loading="lazy"><br>
TCP 的连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，也叫做改进的三次握手。客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 close() 操作即可产生挥手操作。</p>
<ul>
<li>
<p>第一次挥手(FIN=1，seq=x)</p>
<p>假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为1的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。</p>
<p>发送完毕后，客户端进入 <code>FIN_WAIT_1</code> 状态。</p>
</li>
<li>
<p>第二次挥手(ACK=1，ACKnum=x+1)</p>
<p>服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。</p>
<p>发送完毕后，服务器端进入 <code>CLOSE_WAIT</code> 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态，等待服务器端关闭连接。</p>
</li>
<li>
<p>第三次挥手(FIN=1，seq=y)</p>
<p>服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为1。</p>
<p>发送完毕后，服务器端进入 <code>LAST_ACK</code> 状态，等待来自客户端的最后一个ACK。</p>
</li>
<li>
<p>第四次挥手(ACK=1，ACKnum=y+1)</p>
<p>客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 <code>TIME_WAIT</code> 状态，等待可能出现的要求重传的 ACK 包。</p>
<p>服务器端接收到这个确认包之后，关闭连接，进入 <code>CLOSED</code> 状态。</p>
<p>客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 <code>CLOSED</code> 状态。</p>
</li>
</ul>
<p>四次挥手的示意图如下：</p>
<figure data-type="image" tabindex="1"><img src="https://isjyi.github.io/post-images/1589094535686.png" alt="四次挥手的示意" loading="lazy"></figure>
<h2 id="syn攻击">SYN攻击</h2>
<ul>
<li>
<p>什么是 SYN 攻击（SYN Flood）？</p>
<p>在三次握手过程中，服务器发送 SYN-ACK 之后，收到客户端的 ACK 之前的 TCP 连接称为半连接(half-open connect)。此时服务器处于 SYN_RCVD 状态。当收到 ACK 后，服务器才能转入 ESTABLISHED 状态.</p>
<p>SYN 攻击指的是，攻击客户端在短时间内伪造大量不存在的IP地址，向服务器不断地发送SYN包，服务器回复确认包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。</p>
<p>SYN 攻击是一种典型的 DoS/DDoS 攻击。</p>
</li>
<li>
<p>如何检测 SYN 攻击？</p>
<p>检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击。在 Linux/Unix 上可以使用系统自带的 netstats 命令来检测 SYN 攻击。</p>
</li>
<li>
<p>如何防御 SYN 攻击？</p>
<p>SYN攻击不能完全被阻止，除非将TCP协议重新设计。我们所做的是尽可能的减轻SYN攻击的危害，常见的防御 SYN 攻击的方法有如下几种：</p>
<ul>
<li>缩短超时（SYN Timeout）时间</li>
<li>增加最大半连接数</li>
<li>过滤网关防护</li>
<li>SYN cookies技术</li>
</ul>
</li>
</ul>
<h2 id="tcp-keepalive">TCP KeepAlive</h2>
<p>TCP 的连接，实际上是一种纯软件层面的概念，在物理层面并没有“连接”这种概念。TCP 通信双方建立交互的连接，但是并不是一直存在数据交互，有些连接会在数据交互完毕后，主动释放连接，而有些不会。在长时间无数据交互的时间段内，交互双方都有可能出现掉电、死机、异常重启等各种意外，当这些意外发生之后，这些 TCP 连接并未来得及正常释放，在软件层面上，连接的另一方并不知道对端的情况，它会一直维护这个连接，长时间的积累会导致非常多的半打开连接，造成端系统资源的消耗和浪费，为了解决这个问题，在传输层可以利用 TCP 的 KeepAlive 机制实现来实现。主流的操作系统基本都在内核里支持了这个特性。</p>
<p>TCP KeepAlive 的基本原理是，隔一段时间给连接对端发送一个探测包，如果收到对方回应的 ACK，则认为连接还是存活的，在超过一定重试次数之后还是没有收到对方的回应，则丢弃该 TCP 连接。</p>
<p><a href="http://www.tldp.org/HOWTO/html_single/TCP-Keepalive-HOWTO/">TCP-Keepalive-HOWTO</a> 有对 TCP KeepAlive 特性的详细介绍，有兴趣的同学可以参考。这里主要说一下，TCP KeepAlive 的局限。首先 TCP KeepAlive 监测的方式是发送一个 probe 包，会给网络带来额外的流量，另外 TCP KeepAlive 只能在内核层级监测连接的存活与否，而连接的存活不一定代表服务的可用。例如当一个服务器 CPU 进程服务器占用达到 100%，已经卡死不能响应请求了，此时 TCP KeepAlive 依然会认为连接是存活的。因此 TCP KeepAlive 对于应用层程序的价值是相对较小的。需要做连接保活的应用层程序，例如 QQ，往往会在应用层实现自己的心跳功能。</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="https://www.lizenghai.com/archives/20153.html">计算机网络：自顶向下方法</a></li>
<li><a href="https://www.cnblogs.com/hnrainll/archive/2011/10/14/2212415.html">TCP三次握手及四次挥手详细图解</a></li>
<li><a href="https://www.cnblogs.com/rootq/articles/1377355.html">TCP协议三次握手过程分析</a></li>
<li><a href="https://blog.csdn.net/whuslei/article/details/6667471">TCP协议中的三次握手和四次挥手(图解)</a></li>
<li><a href="https://zh.wikipedia.org/wiki/SYN_flood">维基百科：SYN flood</a></li>
<li><a href="http://www.tldp.org/HOWTO/html_single/TCP-Keepalive-HOWTO/">TCP-Keepalive-HOWTO</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[IP]]></title>
        <id>https://isjyi.github.io/post/ip/</id>
        <link href="https://isjyi.github.io/post/ip/">
        </link>
        <updated>2019-01-12T07:14:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="ip-协议简介">IP 协议简介</h2>
<p>IP 协议位于 TCP/IP 协议的第三层——网络层。与传输层协议相比，网络层的责任是提供点到点(hop by hop)的服务，而传输层（TCP/UDP）则提供端到端(end to end)的服务。</p>
<h2 id="ip-地址的分类">IP 地址的分类</h2>
<h3 id="a类地址">A类地址</h3>
<h3 id="b类地址">B类地址</h3>
<h3 id="c类地址">C类地址</h3>
<h3 id="d类地址">D类地址</h3>
<h2 id="广播与多播">广播与多播</h2>
<p>广播和多播仅用于UDP（TCP是面向连接的）。</p>
<ul>
<li>
<p>广播</p>
<p>一共有四种广播地址：</p>
<ol>
<li>
<p>受限的广播</p>
<p>受限的广播地址为255.255.255.255。该地址用于主机配置过程中IP数据报的目的地址，在任何情况下，router不转发目的地址为255.255.255.255的数据报，这样的数据报仅出现在本地网络中。</p>
</li>
<li>
<p>指向网络的广播</p>
<p>指向网络的广播地址是主机号为全1的地址。A类网络广播地址为netid.255.255.255，其中netid为A类网络的网络号。</p>
<p>一个router必须转发指向网络的广播，但它也必须有一个不进行转发的选择。</p>
</li>
<li>
<p>指向子网的广播</p>
<p>指向子网的广播地址为主机号为全1且有特定子网号的地址。作为子网直接广播地址的IP地址需要了解子网的掩码。例如，router收到128.1.2.255的数据报，当B类网路128.1的子网掩码为255.255.255.0时，该地址就是指向子网的广播地址；但是如果子网掩码为255.255.254.0，该地址就不是指向子网的广播地址。</p>
</li>
<li>
<p>指向所有子网的广播</p>
<p>指向所有子网的广播也需要了解目的网络的子网掩码，以便与指向网络的广播地址区分开来。指向所有子网的广播地址的子网号和主机号为全1.例如，如果子网掩码为255.255.255.0，那么128.1.255.255就是一个指向所有子网的广播地址。</p>
<p>当前的看法是这种广播是陈旧过时的，更好的方式是使用多播而不是对所有子网的广播。</p>
<p>广播示例:</p>
<pre><code>PING 192.168.0.255 (192.168.0.255): 56 data bytes
64 bytes from 192.168.0.107: icmp_seq=0 ttl=64 time=0.199 ms
64 bytes from 192.168.0.106: icmp_seq=0 ttl=64 time=45.357 ms
64 bytes from 192.168.0.107: icmp_seq=1 ttl=64 time=0.203 ms
64 bytes from 192.168.0.106: icmp_seq=1 ttl=64 time=269.475 ms
64 bytes from 192.168.0.107: icmp_seq=2 ttl=64 time=0.102 ms
64 bytes from 192.168.0.106: icmp_seq=2 ttl=64 time=189.881 ms
</code></pre>
<p>可以看到的确收到了来自两个主机的答复，其中 192.168.0.107 是本机地址。</p>
</li>
</ol>
</li>
<li>
<p>多播</p>
<p>多播又叫组播，使用D类地址，D类地址分配的28bit均用作多播组号而不再表示其他。</p>
<p>多播组地址包括1110的最高4bit和多播组号。它们通常可以表示为点分十进制数，范围从224.0.0.0到239.255.255.255。</p>
<p>多播的出现减少了对应用不感兴趣主机的处理负荷。</p>
<p>多播的特点：</p>
<ul>
<li>
<p>允许一个或多个发送者（组播源）发送单一的数据包到多个接收者（一次的，同时的）的网络技术</p>
</li>
<li>
<p>可以大大的节省网络带宽，因为无论有多少个目标地址，在整个网络的任何一条链路上只传送单一的数据包</p>
</li>
<li>
<p>多播技术的核心就是针对如何节约网络资源的前提下保证服务质量。</p>
<p>多播示例：</p>
<pre><code>PING 224.0.0.1 (224.0.0.1): 56 data bytes
64 bytes from 192.168.0.107: icmp_seq=0 ttl=64 time=0.081 ms
64 bytes from 192.168.0.106: icmp_seq=0 ttl=64 time=123.081 ms
64 bytes from 192.168.0.107: icmp_seq=1 ttl=64 time=0.122 ms
64 bytes from 192.168.0.106: icmp_seq=1 ttl=64 time=67.312 ms
64 bytes from 192.168.0.107: icmp_seq=2 ttl=64 time=0.132 ms
64 bytes from 192.168.0.106: icmp_seq=2 ttl=64 time=447.073 ms
64 bytes from 192.168.0.107: icmp_seq=3 ttl=64 time=0.132 ms
64 bytes from 192.168.0.106: icmp_seq=3 ttl=64 time=188.800 ms  
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="bgp">BGP</h2>
<ul>
<li>边界网关协议（BGP）是运行于 TCP 上的一种自治系统的路由协议</li>
<li>BGP 是唯一一个用来处理像因特网大小的网络的协议，也是唯一能够妥善处理好不相关路由域间的多路连接的协议</li>
<li>BGP是一种外部网关协议（Exterior Gateway Protocol，EGP），与OSPF、RIP等内部网关协议（Interior Gateway Protocol，IGP）不同，BGP不在于发现和计算路由，而在于控制路由的传播和选择最佳路由</li>
<li>BGP使用TCP作为其传输层协议（端口号179），提高了协议的可靠性</li>
<li>BGP既不是纯粹的矢量距离协议，也不是纯粹的链路状态协议</li>
<li>BGP支持CIDR（Classless Inter-Domain Routing，无类别域间路由）</li>
<li>路由更新时，BGP只发送更新的路由，大大减少了BGP传播路由所占用的带宽，适用于在Internet上传播大量的路由信息</li>
<li>BGP路由通过携带AS路径信息彻底解决路由环路问题</li>
<li>BGP提供了丰富的路由策略，能够对路由实现灵活的过滤和选择</li>
<li>BGP易于扩展，能够适应网络新的发展</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="https://www.cnblogs.com/Torres_fans/archive/2011/03/21/1990377.html">多播与广播</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_ac9fdc0b0101pw7w.html">TCP_IP：广播和多播</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%BE%B9%E7%95%8C%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE">维基百科：BGP</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[UDP]]></title>
        <id>https://isjyi.github.io/post/udp/</id>
        <link href="https://isjyi.github.io/post/udp/">
        </link>
        <updated>2019-01-11T07:13:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="udp-简介">UDP 简介</h2>
<p>UDP 是一个简单的传输层协议。和 TCP 相比，UDP 有下面几个显著特性：</p>
<ul>
<li>UDP 缺乏可靠性。UDP 本身不提供确认，序列号，超时重传等机制。UDP 数据报可能在网络中被复制，被重新排序。即 UDP 不保证数据报会到达其最终目的地，也不保证各个数据报的先后顺序，也不保证每个数据报只到达一次</li>
<li>UDP 数据报是有长度的。每个 UDP 数据报都有长度，如果一个数据报正确地到达目的地，那么该数据报的长度将随数据一起传递给接收方。而 TCP 是一个字节流协议，没有任何（协议上的）记录边界。</li>
<li>UDP 是无连接的。UDP 客户和服务器之前不必存在长期的关系。UDP 发送数据报之前也不需要经过握手创建连接的过程。</li>
<li>UDP 支持多播和广播。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTPS 基本过程]]></title>
        <id>https://isjyi.github.io/post/https/</id>
        <link href="https://isjyi.github.io/post/https/">
        </link>
        <updated>2019-01-10T06:58:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="https-基本过程">HTTPS 基本过程</h2>
<p>HTTPS 即 HTTP over TLS，是一种在加密信道进行 HTTP 内容传输的协议。</p>
<blockquote>
<p>TLS 的早期版本叫做 SSL。SSL 的 1.0, 2.0, 3.0 版本均已经被废弃，出于安全问题考虑广大浏览器也不再对老旧的 SSL 版本进行支持了，因此这里我们就统一使用 TLS 名称了。</p>
</blockquote>
<p>TLS 的基本过程如下（取自 <a href="https://github.com/skyline75489/what-happens-when-zh_CN#tls">what-happens-when-zh_CN</a>）：</p>
<ul>
<li>客户端发送一个 <code>ClientHello</code> 消息到服务器端，消息中同时包含了它的 Transport Layer Security (TLS) 版本，可用的加密算法和压缩算法。</li>
<li>服务器端向客户端返回一个 ServerHello 消息，消息中包含了服务器端的 TLS 版本，服务器所选择的加密和压缩算法，以及数字证书认证机构（Certificate Authority，缩写 CA）签发的服务器公开证书，证书中包含了公钥。客户端会使用这个公钥加密接下来的握手过程，直到协商生成一个新的对称密钥。证书中还包含了该证书所应用的域名范围（Common Name，简称 CN），用于客户端验证身份。</li>
<li>客户端根据自己的信任 CA 列表，验证服务器端的证书是否可信。如果认为可信（具体的验证过程在下一节讲解），客户端会生成一串伪随机数，使用服务器的公钥加密它。这串随机数会被用于生成新的对称密钥</li>
<li>服务器端使用自己的私钥解密上面提到的随机数，然后使用这串随机数生成自己的对称主密钥</li>
<li>客户端发送一个 <code>Finished</code> 消息给服务器端，使用对称密钥加密这次通讯的一个散列值</li>
<li>服务器端生成自己的 hash 值，然后解密客户端发送来的信息，检查这两个值是否对应。如果对应，就向客户端发送一个 <code>Finished</code> 消息，也使用协商好的对称密钥加密</li>
<li>从现在开始，接下来整个 TLS 会话都使用对称秘钥进行加密，传输应用层（HTTP）内容</li>
</ul>
<p>从上面的过程可以看到，TLS 的完整过程需要三个算法（协议），密钥交互算法，对称加密算法，和消息认证算法（TLS 的传输会使用 MAC(message authentication code) 进行完整性检查）。</p>
<p>我们以 Github 网站使用的 TLS 为例，使用浏览器可以看到它使用的加密为</p>
<p><code>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</code>。其中密钥交互算法是 <code>ECDHE_RSA</code>，对称加密算法是 <code>AES_128_GCM</code>，消息认证（MAC）算法为 <code>SHA256</code>。</p>
<h2 id="tls-证书机制">TLS 证书机制</h2>
<p>HTTPS 过程中很重要的一个步骤，是服务器需要有 CA 颁发的证书，客户端根据自己的信任 CA 列表验证服务器的身份。现代浏览器中，证书验证的过程依赖于证书信任链。</p>
<p>所谓证书信任链，即一个证书要依靠上一级证书来证明自己是可信的，最顶层的证书被称为根证书，拥有根证书的机构被称为根 CA。</p>
<p>还是以 Github 为例，在浏览器中我们可以看到它的证书信任链如下：</p>
<p><code>DigiCert High Assurance EV Root CA -&gt; DigiCert SHA2 Extended Validation Server CA -&gt; Github.com</code></p>
<p>从上到下即 Root CA -&gt; 二级 CA -&gt; 网站。</p>
<p>前面提到，证书当中包括 CN(Common Name)，浏览器在验证证书的同时，也会验证 CN 的正确性。即不光需要验证“这是一个合法的证书”，还需要验证“这是一个用于 Github.com 的证书”。</p>
<p>既然所有的信任，最终要落到根 CA 上，根证书本身又是怎么获得的呢？答案也很简单，根证书一般是操作系统自带的。不管是桌面系统 Windows，macOS 还是移动端系统 Android, iOS 都会内置一系列根证书。随着操作系统本身的升级，根证书也会随着升级进行更新。</p>
<p>对浏览器而已，浏览器当然也有选择信任某个根证书的权利。Chrome 浏览器一般是跟随系统根证书信任的。Firefox 浏览器通常是使用自带的一套证书信任机制，不受系统证书的影响。</p>
<p>在使用 <code>curl</code> 等工具时，我们还可以自行选择证书进行信任。</p>
<blockquote>
<p>有权威的信任，最终都要落到一个单点信任，不管是 Root CA，还是微软，苹果，谷歌等操作系统厂商。</p>
</blockquote>
<h2 id="中间人攻击">中间人攻击</h2>
<p>HTTPS 的过程并不是密不透风的，HTTPS 有若干漏洞，给中间人攻击（Man In The Middle Attack，简称 MITM）提供了可能。</p>
<p>所谓中间人攻击，指攻击者与通讯的两端分别建立独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。在中间人攻击中，攻击者可以拦截通讯双方的通话并插入新的内容。</p>
<h2 id="ssl-剥离">SSL 剥离</h2>
<p>SSL 剥离即阻止用户使用 HTTPS 访问网站。由于并不是所有网站都只支持 HTTPS，大部分网站会同时支持 HTTP 和 HTTPS 两种协议。用户在访问网站时，也可能会在地址栏中输入 http:// 的地址，第一次的访问完全是明文的，这就给了攻击者可乘之机。通过攻击 DNS 响应，攻击者可以将自己变成中间人。</p>
<blockquote>
<p>DNS 作为基于 UDP 的协议是相当不安全的，为了保证 DNS 的安全可以使用 DNS over TCP 等机制，这里不赘述了。</p>
</blockquote>
<h2 id="hsts">HSTS</h2>
<p>为了防止上面说的这种情况，一种叫做 HSTS 的技术被引入了。HSTS（HTTP Strict Transport Security）是用于强制浏览器使用 HTTPS 访问网站的一种机制。它的基本机制是在服务器返回的响应中，加上一个特殊的头部，指示浏览器对于此网站，强制使用 HTTPS 进行访问：</p>
<p><code>Strict-Transport-Security: max-age=31536000; includeSubdomains; preload</code></p>
<p>可以看到如果这个过期时间非常长，就是导致在很长一段时间内，浏览器都会强制使用 HTTPS 访问该网站。</p>
<p>HSTS 有一个很明显的缺点，是需要等待第一个服务器的影响中的头部才能生效，但如果第一次访问该网站就被攻击呢？为了解决这个问题，浏览器中会带上一些网站的域名，被称为 HSTS preload list。对于在这个 list 的网站来说，直接强制使用 HTTPS。</p>
<h2 id="伪造证书攻击">伪造证书攻击</h2>
<p>HSTS 只解决了 SSL 剥离的问题，然而即使在全程使用 HTTPS 的情况下，我们仍然有可能被监听。</p>
<p>假设我们想访问 <code>www.google.com</code>，但我们的 DNS 服务器被攻击了，指向的 IP 地址并非 Google 的服务器，而是攻击者的 IP。当攻击者的服务器也有合法的证书的时候，我们的浏览器就会认为对方是 Google 服务器，从而信任对方。这样，攻击者便可以监听我们和谷歌之前的所有通信了。</p>
<p>可以看到攻击者有两步需要操作，第一步是需要攻击 DNS 服务器。第二步是攻击者自己的证书需要被用户信任，这一步对于用户来说是很难控制的，需要证书颁发机构能够控制自己不滥发证书。</p>
<blockquote>
<p>2015 年 Google 称发现赛门铁克旗下的 Thawte 未经同意签发了众多域名的数千个证书，其中包括 Google 旗下的域名和不存在的域名。当年 12 月，Google 发布公告称 Chrome、Android 及其他 Google 产品将不再信任赛门铁克旗下的&quot;Class 3 Public Primary CA&quot;根证书。<br>
<br/><br/>2016 年 Mozilla 发现沃通 CA 存在严重的信任问题，例如偷签 <code>github.com</code> 的证书，故意倒填证书日期绕过浏览器对 SHA-1 证书的限制等，将停止信任 WoSign 和 StartCom 签发的新证书。</p>
</blockquote>
<h2 id="hpkp">HPKP</h2>
<p>HPKP 技术是为了解决伪造证书攻击而诞生的。</p>
<p>HPKP（Public Key Pinning Extension for HTTP）在 HSTS 上更进一步，HPKP 直接在返回头中存储服务器的公钥指纹信息，一旦发现指纹和实际接受到的公钥有差异，浏览器就可以认为正在被攻击：</p>
<p><code>Public-Key-Pins: pin-sha256=&quot;base64==&quot;; max-age=expireTime [; includeSubDomains][; report-uri=&quot;reportURI&quot;]</code></p>
<p>和 HSTS 类似，HPKP 也依赖于服务器的头部返回，不能解决第一次访问的问题，浏览器本身也会内置一些 HPKP 列表。</p>
<blockquote>
<p>HPKP 技术仍然不能阻止第一次访问的攻击问题，部署和配置 HPKP 相当繁琐，一旦网站配置错误，就会导致网站证书验证失败，且在过期时间内无法有效恢复。HPKP 的机制也引来了一些安全性问题。Chrome 67 中废除了对 HPKP 的支持，在 Chrome 72 中 HPKP 被彻底移除。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux 文件常用操作]]></title>
        <id>https://isjyi.github.io/post/linux-file/</id>
        <link href="https://isjyi.github.io/post/linux-file/">
        </link>
        <updated>2018-05-10T07:28:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="文件文件夹管理">文件/文件夹管理</h1>
<p><code>ls</code></p>
<blockquote>
<p>列出当前目录文件（不包括隐含文件)</p>
</blockquote>
<p><code>ls -a</code></p>
<blockquote>
<p>列出当前目录文件（包括隐含文件）</p>
</blockquote>
<p><code>ls -l</code></p>
<blockquote>
<p>列出当前目录下文件的详细信息</p>
</blockquote>
<p><code>cd ..</code></p>
<blockquote>
<p>回当前目录的上一级目录</p>
</blockquote>
<p><code>cd -</code></p>
<blockquote>
<p>回上一次所在的目录</p>
</blockquote>
<p><code>cd ~ 或 cd</code></p>
<blockquote>
<p>回当前用户的宿主目录</p>
</blockquote>
<p><code>mkdir 目录名</code></p>
<blockquote>
<p>创建一个目录</p>
</blockquote>
<p><code>rmdir 空目录名</code></p>
<blockquote>
<p>删除一个空目录</p>
</blockquote>
<p><code>rm</code></p>
<blockquote>
<p>文件名 文件名 删除一个文件或多个文件</p>
</blockquote>
<p><code>rm -rf</code></p>
<blockquote>
<p>非空目录名 删除一个非空目录下的一切</p>
</blockquote>
<p><code>mv 路经/文件 /路径/文件</code></p>
<blockquote>
<p>移动相对路经下的文件到绝对路经下</p>
</blockquote>
<p><code>mv 文件名 新名称</code></p>
<blockquote>
<p>在当前目录下改名</p>
</blockquote>
<p><code>find 路经 -name “字符串”</code></p>
<blockquote>
<p>查找路经所在范围内满足字符串匹配的文件和目录</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu 安装PHP72]]></title>
        <id>https://isjyi.github.io/post/ubuntu-apt-php72/</id>
        <link href="https://isjyi.github.io/post/ubuntu-apt-php72/">
        </link>
        <updated>2018-03-10T07:30:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ubuntu-安装php72">Ubuntu 安装PHP72</h1>
<p><code>sudo apt-get install software-properties-common python-software-properties</code></p>
<p><code>sudo add-apt-repository ppa:ondrej/php &amp;&amp; sudo apt-get update</code></p>
<p><code>sudo apt-get -y install php7.2</code></p>
<h2 id="如果之前有其他版本php在这边禁用掉">如果之前有其他版本PHP，在这边禁用掉</h2>
<p><code>sudo a2dismod php5</code></p>
<p><code>sudo a2enmod php7.2</code></p>
<h2 id="安装常用扩展">安装常用扩展</h2>
<p><code>sudo -y apt-get install php7.2-fpm php7.2-mysql php7.2-curl php7.2-json php7.2-mbstring php7.2-xml php7.2-intl</code></p>
<h2 id="安装其他扩展按需安装">安装其他扩展（按需安装）</h2>
<p><code>sudo apt-get install php7.2-gd</code></p>
<p><code>sudo apt-get install php7.2-soap</code></p>
<p><code>sudo apt-get install php7.2-gmp</code></p>
<p><code>sudo apt-get install php7.2-odbc</code></p>
<p><code>sudo apt-get install php7.2-pspell</code></p>
<p><code>sudo apt-get install php7.2-bcmath</code></p>
<p><code>sudo apt-get install php7.2-enchant</code></p>
<p><code>sudo apt-get install php7.2-imap</code></p>
<p><code>sudo apt-get install php7.2-ldap</code></p>
<p><code>sudo apt-get install php7.2-opcache</code></p>
<p><code>sudo apt-get install php7.2-readline</code></p>
<p><code>sudo apt-get install php7.2-sqlite3</code></p>
<p><code>sudo apt-get install php7.2-xmlrpc</code></p>
<p><code>sudo apt-get install php7.2-bz2</code></p>
<p><code>sudo apt-get install php7.2-interbase</code></p>
<p><code>sudo apt-get install php7.2-pgsql</code></p>
<p><code>sudo apt-get install php7.2-recode</code></p>
<p><code>sudo apt-get install php7.2-sybase</code></p>
<p><code>sudo apt-get install php7.2-xsl</code></p>
<p><code>sudo apt-get install php7.2-cgi</code></p>
<p><code>sudo apt-get install php7.2-dba</code></p>
<p><code>sudo apt-get install php7.2-phpdbg</code></p>
<p><code>sudo apt-get install php7.2-snmp</code></p>
<p><code>sudo apt-get install php7.2-tidy</code></p>
<p><code>sudo apt-get install php7.2-zip</code></p>
]]></content>
    </entry>
</feed>